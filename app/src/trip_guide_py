

class Day:
    """
    Representa um único dia em um roteiro de viagem.
    """
    def __init__(self, date, activities=None):
        """
        Inicializa um dia do roteiro.
        
        :param date: A data do dia (string ou objeto datetime).
        :param activities: Lista de atividades para o dia.
        """
        self.date = date
        self.activities = activities if activities else []

    def add_activity(self, activity):
        """
        Adiciona uma atividade ao dia.
        
        :param activity: Uma descrição da atividade.
        """
        self.activities.append(activity)

    def __str__(self):
        """
        Retorna uma representação em string do dia e suas atividades.
        """
        activities_str = "\n  - ".join(self.activities) if self.activities else "Nenhuma atividade."
        return f"Data: {self.date}\nAtividades:\n  - {activities_str}"


class TripGuideDay:
    """
    Representa um roteiro de viagem com uma lista de dias.
    """
    def __init__(self, name):
        """
        Inicializa o roteiro de viagem.
        
        :param name: O nome do roteiro de viagem.
        """
        self.name = name
        self.days = []

    def add_day(self, day):
        """
        Adiciona um objeto Day ao roteiro.
        
        :param day: Um objeto Day.
        """
        if isinstance(day, Day):
            self.days.append(day)
        else:
            raise ValueError("O objeto deve ser uma instância da classe Day.")

    def __str__(self):
        """
        Retorna uma representação em string do roteiro de viagem.
        """
        days_str = "\n\n".join(str(day) for day in self.days) if self.days else "Nenhum dia adicionado."
        return f"Roteiro: {self.name}\n\n{days_str}"
